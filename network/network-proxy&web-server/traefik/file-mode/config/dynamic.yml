# 详见 https://docs.traefik.io/reference/dynamic-configuration/file/
http:
  routers:
    # 配置 traefik dashboard 的入口域名
    api:
      entryPoints:
        - "websecure"
      # Host 插件的域名必须完全匹配，不支持通配符 *
      rule: "Host(`traefik.svc.local`)"
      # 也支持使用正则表达式，注意正则必须写在 {} 中，并且指定一个没什么用的名称(如 prefix/root/subdomain)
      # rule: "HostRegexp(`{prefix:.+}.traefik.{root:(local|lan|srv)}`)"

      # 转发到指定 service，api@internal 是 dashboard 的内部路由
      service: api@internal
      # 当请求能匹配上多个 routers 时，会使用优先级最高的。
      priority: 100
      tls:  # 只支持 TLS 访问！
        options: default  # 这里引用后面的 tls 配置，默认使用 default 配置
        stores: default  # 同上
    
    # 代理 wiki 应用
    wiki:
      entryPoints:
        - "websecure"
      rule: "Host(`wiki.svc.local`) "
      service: wiki
      tls: {} # 只支持 TLS 访问！默认使用 default 配置
    
    # 代理 websocket 协议
    wss-test:
      entryPoints:
        - "websecure"
      rule: "Host(`wss-test.svc.local`) "
      service: wss-test
      tls: {} # 只支持 TLS 访问！默认使用 default 配置

  services:
    wiki:
      loadBalancer:
        servers:
        - url: "http://<host>:<port>/"

    wss-test:
      loadBalancer:
        servers:
        # Traefik 将 WebSocket 当成 Http 流量看待，这里的 url 也用 http://，不能用 ws://
        - url: "http://<host>:<port>/"

# tcp 协议只支持通过 tls 协议的 sni 参数进行路由
# 非 tls 协议，不能分辨数据
tcp:
  routers:
  service:


# TLS 加密
tls:
  options:
    default:  # 默认参数
      minVersion: VersionTLS12
      # 验证客户端证书（mTLS，双向 TLS）
      clientAuth:
        caFiles:
        # 客户端证书的 CA 证书
        - /etc/certs/client-ca.crt
        clientAuthType: RequireAndVerifyClientCert
      sniStrict: true
      preferServerCipherSuites: true
  stores:
    default: # 默认参数
      defaultCertificate:
        certFile: /etc/certs/server.crt
        keyFile: /etc/certs/server.key